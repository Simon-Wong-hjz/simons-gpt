/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.simwong.simonsgpt.api;

import com.simwong.simonsgpt.domain.ChatPostRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-17T18:07:25.043645300+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "chat", description = "Chat with default model")
public interface ChatApi {

    /**
     * POST /chat : Send a message to the default model
     *
     * @param chatPostRequest  (required)
     * @return Stream of chat responses (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "chatPost",
        summary = "Send a message to the default model",
        tags = { "chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stream of chat responses", content = {
                @Content(mediaType = "text/event-stream", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/chat",
        produces = { "text/event-stream" },
        consumes = { "application/json" }
    )
    
    default Flux<String> _chatPost(
        @Parameter(name = "ChatPostRequest", description = "", required = true) @Valid @RequestBody Mono<ChatPostRequest> chatPostRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return chatPost(chatPostRequest, exchange);
    }

    // Override this method
    default  Flux<String> chatPost(Mono<ChatPostRequest> chatPostRequest,  final ServerWebExchange exchange) {
        Flux<Void> result = Flux.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(chatPostRequest).flatMapMany(
            request -> Flux.error(new UnsupportedOperationException("Not implemented"))
        );

    }

}
