/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.simwong.simonsgpt.api;

import com.theokanning.openai.assistants.Assistant;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Validated
@Tag(name = "assistants", description = "Assistant management")
@SecurityRequirement(name = "bearerAuth")
public interface AssistantsApi {

    /**
     * GET /assistants : List all assistants
     *
     * @return A list of assistants (status code 200)
     */
    @Operation(
            operationId = "assistantsGet",
            summary = "List all assistants",
            tags = {"assistants"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of assistants", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Assistant.class)))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/assistants",
            produces = {"application/json"}
    )

    default Mono<ResponseEntity<Flux<Assistant>>> _assistantsGet(
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return assistantsGet(exchange);
    }

    // Override this method
    default Mono<ResponseEntity<Flux<Assistant>>> assistantsGet(final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"instructions\" : \"instructions\", \"metadata\" : { \"key\" : \"\" }, \"name\" : \"name\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"created_at\" : 0, \"description\" : \"description\", \"model\" : \"model\", \"id\" : \"id\", \"tools\" : [ { \"type\" : \"type\" }, { \"type\" : \"type\" } ], \"object\" : \"object\" }, { \"instructions\" : \"instructions\", \"metadata\" : { \"key\" : \"\" }, \"name\" : \"name\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"created_at\" : 0, \"description\" : \"description\", \"model\" : \"model\", \"id\" : \"id\", \"tools\" : [ { \"type\" : \"type\" }, { \"type\" : \"type\" } ], \"object\" : \"object\" } ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
